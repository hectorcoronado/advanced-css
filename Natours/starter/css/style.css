@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-8rem);
    /* transform: rotate(0deg);     */ }
  80% {
    transform: translateX(0.5rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /* transform: rotate(1800deg); */ } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(8rem); }
  80% {
    transform: translateX(-0.5rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(2rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  /* inherit `box-sizing: border-box` everywhere, but declare it on the `body` element selector */
  box-sizing: inherit;
  margin: 0;
  padding: 0; }

html {
  /* 
   * set to 10px to enable use of rem-units; this works, but overrides
   * font-size that e.g. a limited-visibility user may have set, so it's
   * bad practice.
   *
   * much better is to set it using a percentage of the browser's default
   * setting, 16px
   *
   * if we want the setting to equal 10px, we divide 10/16 = 0.625
   *
   * therefore, if the user changes their default font-size to e.g. 20px, our
   * site will automatically convert to a 12.5px font-size (.625 * 20 = 12.5)
  */
  font-size: 62.5%; }

body {
  /* set `box-sizing: border-box;` on the body tag, then inherit everywhere with the universal selector */
  box-sizing: border-box;
  padding: 3rem; }

body {
  color: #777;
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7; }

/**
  * since using the `&` copies the selector, we can use nesting here: 
  */
.heading-primary {
  color: #fff;
  margin-bottom: 6rem;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* setting this property prevents the upward twitch at the end of some animations */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /*
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    */
    animation: moveInLeft .6s ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /*
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    */
    animation: moveInRight .6s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  font-weight: 700;
  letter-spacing: .2rem;
  text-transform: uppercase;
  /**
    * to create `.heading-secondary` gradient:
    * 1. set element's background-image to required gradient
    * 2. set element's display to inline-block (so gradient stops where our
    *    text does
    * 3. set `-webkit-background-clip: text`
    *     - this causes the background to get clipped exactly where the text is
    *       and nowhere else (determines the background painting area)
    * 4. make the text itself transparent, so the background-image shows through
    */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  display: inline-block;
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  /**
    * to create `.heading-secondary` animated transition:
    * 1. set `transition` to all, over a .2s timeframe
    * 2. create skew transforms that occur on hover
    *     - skew along y-axis by 2 degrees
    *     - skew along x-axis by 15 degrees
    *     - make slightly larger by scaling up 1.1 times
    *     - add a text-shadow:
    *         - 5px in x-axis, 10px in y-axis, 20px of blur
    *         - make it $color-black, and give it .2 opacity
    */
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.btn {
  /*
    `btn::after` will specify properties for the animation that occurs on the `<a class="btn..."> elements
      - specifying the `after` pseudo-element essentially creates a child element on the `<a>` element; this is why we declare `width` & `height`
    */
  /*
    - `after` pseudo-element only on the hover-state
      - we've set the initial state on `.btn::after` above:
      - `transition: all .4s;` means that upon hovering, this button will
          - scale to 1.4 times its size on the x-axis
          - scale to 1.6 times its size on the y-axis
          - and fade to transparent (0 opacity)
      ...over an interval of .4 seconds
    */ }
  .btn:link, .btn:visited {
    border-radius: 10rem;
    display: inline-block;
    font-size: 1.6rem;
    padding: 1.5rem 4rem;
    position: relative;
    text-transform: uppercase;
    text-decoration: none;
    transition: all .2s;
    /* `transition` on all the states, as defined below (.btn:hover, .btn:active, etc), and define duration */ }
  .btn:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    border-radius: 10rem;
    position: absolute;
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .4s;
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  border-bottom: 1px solid #55c57a;
  color: #55c57a;
  display: inline-block;
  font-size: 1.6rem;
  padding: 3px;
  text-decoration: none;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    border-radius: 2px;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    outline-offset: 2rem;
    position: absolute;
    transition: all .2s;
    width: 55%;
    z-index: 1; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 10px;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1rem solid #55c57a;
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      transform: scale(1.05) translateY(-0.5rem);
      z-index: 2; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.row {
  max-width: 114rem;
  margin: 0 auto;
  /** we use an attribute selector to apply style to *all* columns at once 
      * - we're choosing all elements with a class starting with `col`
      * - that's what the `^=` operator does (chooses things starting with something)
      */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 3rem; }
  .row .col-1-of-2 {
    width: calc((100% - 3rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 3rem) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 3rem) / 4); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 3rem) / 3) + 3rem); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 3rem) / 4) + 3rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 3rem) / 4) + (2 * 3rem)); }

.header {
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-position: top;
  background-size: cover;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  height: 95vh;
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    /* since we have `<a>` elements that act as buttons, but are treated as text by browsers, we can center them via this property  */ }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  /**
      * we have a polygon in the header, creating a triangular white-space above
      * - `.section-about`; `.header`'s height is 95vh, the polygon begins at
      * - 75vh, so we can pull this section up by 20vh's to "erase" the 
      * - whitespace
      */
  margin-top: -20vh; }
